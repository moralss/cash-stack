{"ast":null,"code":"(function (global, factory) {\n  'use strict';\n\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.saIdParser = factory();\n})(this, function () {\n  'use strict';\n\n  return {\n    parse: parse,\n    validate: validate,\n    parseDateOfBirth: parseDateOfBirth,\n    parseIsMale: parseIsMale,\n    parseIsFemale: parseIsFemale,\n    parseIsSouthAfricanCitizen: parseIsSouthAfricanCitizen\n  };\n\n  function parse(idNumber) {\n    var isValid = validate(idNumber);\n\n    if (!isValid) {\n      return {\n        isValid: false\n      };\n    }\n\n    return {\n      isValid: isValid,\n      dateOfBirth: parseDateOfBirth(idNumber),\n      isMale: parseIsMale(idNumber),\n      isFemale: parseIsFemale(idNumber),\n      isSouthAfricanCitizen: parseIsSouthAfricanCitizen(idNumber)\n    };\n  }\n\n  function validate(idNumber) {\n    if (!regexpValidate(idNumber) || !datePartValidate(idNumber) || !controlDigitValidate(idNumber)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function regexpValidate(idNumber) {\n    if (typeof idNumber !== 'string') {\n      return false;\n    }\n\n    var regexp = /^[0-9]{13}$/;\n    return regexp.test(idNumber);\n  }\n\n  function datePartValidate(idNumber) {\n    var dateOfBirth = parseDateOfBirth(idNumber);\n    return !!dateOfBirth;\n  }\n\n  function controlDigitValidate(idNumber) {\n    var checkDigit = parseInt(idNumber[12], 10);\n    var oddDigitsSum = 0;\n\n    for (var i = 0; i < idNumber.length - 1; i += 2) {\n      oddDigitsSum += parseInt(idNumber[i], 10);\n    }\n\n    var evenDigits = '';\n\n    for (var j = 1; j < idNumber.length - 1; j += 2) {\n      evenDigits += idNumber[j];\n    }\n\n    evenDigits = parseInt(evenDigits, 10);\n    evenDigits *= 2;\n    evenDigits = '' + evenDigits;\n    var sumOfEvenDigits = 0;\n\n    for (var k = 0; k < evenDigits.length; k++) {\n      sumOfEvenDigits += parseInt(evenDigits[k], 10);\n    }\n\n    var total = sumOfEvenDigits + oddDigitsSum;\n    var computedCheckDigit = 10 - total % 10;\n\n    if (computedCheckDigit === 10) {\n      computedCheckDigit = 0;\n    }\n\n    return computedCheckDigit === checkDigit;\n  }\n\n  function parseDateOfBirth(idNumber) {\n    if (!regexpValidate(idNumber)) {\n      return undefined;\n    } //get year, and assume century\n\n\n    var currentYear = new Date().getFullYear();\n    var currentCentury = Math.floor(currentYear / 100) * 100;\n    var yearPart = currentCentury + parseInt(idNumber.substring(0, 2), 10);\n\n    if (yearPart > currentYear) {\n      yearPart -= 100; //must be last century\n    } //In Javascript, Jan=0. In ID Numbers, Jan=1.\n\n\n    var monthPart = parseInt(idNumber.substring(2, 4), 10) - 1;\n    var dayPart = parseInt(idNumber.substring(4, 6), 10);\n    var dateOfBirth = new Date(yearPart, monthPart, dayPart); //validate that date is in a valid range by making sure that it wasn't 'corrected' during construction\n\n    if (!dateOfBirth || dateOfBirth.getFullYear() !== yearPart || dateOfBirth.getMonth() !== monthPart || dateOfBirth.getDate() !== dayPart) {\n      return undefined;\n    }\n\n    return dateOfBirth;\n  }\n\n  function parseIsMale(idNumber) {\n    return !parseIsFemale(idNumber);\n  }\n\n  function parseIsFemale(idNumber) {\n    if (!regexpValidate(idNumber)) {\n      return undefined;\n    }\n\n    return parseInt(idNumber[6], 10) <= 4;\n  }\n\n  function parseIsSouthAfricanCitizen(idNumber) {\n    if (!regexpValidate(idNumber)) {\n      return undefined;\n    }\n\n    return parseInt(idNumber[10], 10) === 0;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}