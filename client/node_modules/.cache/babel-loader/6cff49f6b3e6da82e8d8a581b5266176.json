{"ast":null,"code":"/**\n * Globalize v1.4.2\n *\n * http://github.com/jquery/globalize\n *\n * Copyright 2010, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2019-03-07T13:47Z\n */\n\n/*!\n * Globalize v1.4.2 2019-03-07T13:47Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  // UMD returnExports\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"cldr\", \"../globalize\", \"./number\", \"./plural\", \"cldr/event\", \"cldr/supplemental\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"cldrjs\"), require(\"../globalize\"));\n  } else {\n    // Extend global\n    factory(root.Cldr, root.Globalize);\n  }\n})(this, function (Cldr, Globalize) {\n  var formatMessage = Globalize._formatMessage,\n      runtimeBind = Globalize._runtimeBind,\n      validateCldr = Globalize._validateCldr,\n      validateDefaultLocale = Globalize._validateDefaultLocale,\n      validateParameterPresence = Globalize._validateParameterPresence,\n      validateParameterTypeString = Globalize._validateParameterTypeString,\n      validateParameterTypeNumber = Globalize._validateParameterTypeNumber;\n  /**\n   * format( value, numberFormatter, pluralGenerator, properties )\n   *\n   * @value [Number] The number to format\n   *\n   * @numberFormatter [String] A numberFormatter from Globalize.numberFormatter\n   *\n   * @pluralGenerator [String] A pluralGenerator from Globalize.pluralGenerator\n   *\n   * @properties [Object] containing relative time plural message.\n   *\n   * Format relative time.\n   */\n\n  var relativeTimeFormat = function (value, numberFormatter, pluralGenerator, properties) {\n    var relativeTime,\n        message = properties[\"relative-type-\" + value];\n\n    if (message) {\n      return message;\n    }\n\n    relativeTime = value <= 0 ? properties[\"relativeTime-type-past\"] : properties[\"relativeTime-type-future\"];\n    value = Math.abs(value);\n    message = relativeTime[\"relativeTimePattern-count-\" + pluralGenerator(value)];\n    return formatMessage(message, [numberFormatter(value)]);\n  };\n\n  var relativeTimeFormatterFn = function (numberFormatter, pluralGenerator, properties) {\n    return function relativeTimeFormatter(value) {\n      validateParameterPresence(value, \"value\");\n      validateParameterTypeNumber(value, \"value\");\n      return relativeTimeFormat(value, numberFormatter, pluralGenerator, properties);\n    };\n  };\n  /**\n   * properties( unit, cldr, options )\n   *\n   * @unit [String] eg. \"day\", \"week\", \"month\", etc.\n   *\n   * @cldr [Cldr instance].\n   *\n   * @options [Object]\n   * - form: [String] eg. \"short\" or \"narrow\". Or falsy for default long form.\n   *\n   * Return relative time properties.\n   */\n\n\n  var relativeTimeProperties = function (unit, cldr, options) {\n    var form = options.form,\n        raw,\n        properties,\n        key,\n        match;\n\n    if (form) {\n      unit = unit + \"-\" + form;\n    }\n\n    raw = cldr.main([\"dates\", \"fields\", unit]);\n    properties = {\n      \"relativeTime-type-future\": raw[\"relativeTime-type-future\"],\n      \"relativeTime-type-past\": raw[\"relativeTime-type-past\"]\n    };\n\n    for (key in raw) {\n      if (raw.hasOwnProperty(key)) {\n        match = /relative-type-(-?[0-9]+)/.exec(key);\n\n        if (match) {\n          properties[key] = raw[key];\n        }\n      }\n    }\n\n    return properties;\n  };\n  /**\n   * .formatRelativeTime( value, unit [, options] )\n   *\n   * @value [Number] The number of unit to format.\n   *\n   * @unit [String] see .relativeTimeFormatter() for details.\n   *\n   * @options [Object] see .relativeTimeFormatter() for details.\n   *\n   * Formats a relative time according to the given unit, options, and the default/instance locale.\n   */\n\n\n  Globalize.formatRelativeTime = Globalize.prototype.formatRelativeTime = function (value, unit, options) {\n    validateParameterPresence(value, \"value\");\n    validateParameterTypeNumber(value, \"value\");\n    return this.relativeTimeFormatter(unit, options)(value);\n  };\n  /**\n   * .relativeTimeFormatter( unit [, options ])\n   *\n   * @unit [String] String value indicating the unit to be formatted. eg. \"day\", \"week\", \"month\", etc.\n   *\n   * @options [Object]\n   * - form: [String] eg. \"short\" or \"narrow\". Or falsy for default long form.\n   *\n   * Returns a function that formats a relative time according to the given unit, options, and the\n   * default/instance locale.\n   */\n\n\n  Globalize.relativeTimeFormatter = Globalize.prototype.relativeTimeFormatter = function (unit, options) {\n    var args, cldr, numberFormatter, pluralGenerator, properties, returnFn;\n    validateParameterPresence(unit, \"unit\");\n    validateParameterTypeString(unit, \"unit\");\n    cldr = this.cldr;\n    options = options || {};\n    args = [unit, options];\n    validateDefaultLocale(cldr);\n    cldr.on(\"get\", validateCldr);\n    properties = relativeTimeProperties(unit, cldr, options);\n    cldr.off(\"get\", validateCldr);\n    numberFormatter = this.numberFormatter(options);\n    pluralGenerator = this.pluralGenerator();\n    returnFn = relativeTimeFormatterFn(numberFormatter, pluralGenerator, properties);\n    runtimeBind(args, cldr, returnFn, [numberFormatter, pluralGenerator, properties]);\n    return returnFn;\n  };\n\n  return Globalize;\n});","map":null,"metadata":{},"sourceType":"script"}