{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = globalizeLocalizer;\n\nvar _globalize = _interopRequireDefault(require(\"globalize\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _configure = _interopRequireDefault(require(\"react-widgets/lib/configure\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction endOfDecade(date) {\n  date = new Date(date);\n  date.setFullYear(date.getFullYear() + 10);\n  date.setMilliseconds(date.getMilliseconds() - 1);\n  return date;\n}\n\nfunction endOfCentury(date) {\n  date = new Date(date);\n  date.setFullYear(date.getFullYear() + 100);\n  date.setMilliseconds(date.getMilliseconds() - 1);\n  return date;\n}\n\nfunction globalizeLocalizer(options) {\n  var localizers = _globalize.default.locale && !_globalize.default.cultures ? newGlobalize(_globalize.default, options || {}) : oldGlobalize(_globalize.default);\n\n  _configure.default.setLocalizers(localizers);\n\n  return localizers;\n}\n\nfunction newGlobalize(globalize) {\n  function locale(culture) {\n    return culture ? globalize(culture) : globalize;\n  }\n\n  var date = {\n    formats: {\n      date: {\n        date: 'short'\n      },\n      time: {\n        time: 'short'\n      },\n      default: {\n        datetime: 'medium'\n      },\n      header: {\n        raw: 'MMMM yyyy'\n      },\n      footer: {\n        date: 'full'\n      },\n      weekday: {\n        raw: 'eeeeee'\n      },\n      dayOfMonth: {\n        raw: 'd'\n      },\n      month: {\n        raw: 'MMM'\n      },\n      year: {\n        raw: 'yyyy'\n      },\n      decade: function decade(dt, culture, l) {\n        return l.format(dt, l.formats.year, culture) + \" - \" + l.format(endOfDecade(dt), l.formats.year, culture);\n      },\n      century: function century(dt, culture, l) {\n        return l.format(dt, l.formats.year, culture) + \" - \" + l.format(endOfCentury(dt), l.formats.year, culture);\n      }\n    },\n    propType: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func]),\n    firstOfWeek: function firstOfWeek(culture) {\n      var date = new Date();\n      var localeDay = locale(culture).formatDate(date, {\n        raw: 'e'\n      }); //cldr-data doesn't seem to be zero based\n\n      localeDay = Math.max(parseInt(localeDay, 10) - 1, 0);\n      return Math.abs(date.getDay() - localeDay);\n    },\n    parse: function parse(value, format, culture) {\n      format = typeof format === 'string' ? {\n        raw: format\n      } : format;\n      return locale(culture).parseDate(value, format);\n    },\n    format: function format(value, _format, culture) {\n      _format = typeof _format === 'string' ? {\n        raw: _format\n      } : _format;\n      return locale(culture).formatDate(value, _format);\n    }\n  };\n  var number = {\n    formats: {\n      default: {\n        maximumFractionDigits: 0\n      }\n    },\n    propType: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),\n    // TODO major bump consistent ordering\n    parse: function parse(value, culture) {\n      return locale(culture).parseNumber(value);\n    },\n    format: function format(value, _format2, culture) {\n      if (value == null) return value;\n      if (_format2 && _format2.currency) return locale(culture).formatCurrency(value, _format2.currency, _format2);\n      return locale(culture).formatNumber(value, _format2);\n    },\n    decimalChar: function decimalChar(format, culture) {\n      var str = locale(culture).formatNumber(1.1, {\n        raw: '0.0'\n      });\n      return str[str.length - 2] || '.';\n    },\n    precision: function precision(format) {\n      return !format || format.maximumFractionDigits == null ? null : format.maximumFractionDigits;\n    }\n  };\n  return {\n    date: date,\n    number: number\n  };\n}\n\nfunction oldGlobalize(oldGlobalize) {\n  var shortNames = Object.create(null);\n\n  function getCulture(culture) {\n    return culture ? oldGlobalize.findClosestCulture(culture) : oldGlobalize.culture();\n  }\n\n  function firstOfWeek(culture) {\n    culture = getCulture(culture);\n    return culture && culture.calendar.firstDay || 0;\n  }\n\n  function shortDay(dayOfTheWeek) {\n    var culture = getCulture(arguments[1]),\n        name = culture.name,\n        days = function days() {\n      return culture.calendar.days.namesShort.slice();\n    };\n\n    var names = shortNames[name] || (shortNames[name] = days());\n    return names[dayOfTheWeek.getDay()];\n  }\n\n  var date = {\n    formats: {\n      date: 'd',\n      time: 't',\n      default: 'f',\n      header: 'MMMM yyyy',\n      footer: 'D',\n      weekday: shortDay,\n      dayOfMonth: '%d',\n      month: 'MMM',\n      year: 'yyyy',\n      decade: function decade(dt, culture, l) {\n        return l.format(dt, l.formats.year, culture) + \" - \" + l.format(endOfDecade(dt), l.formats.year, culture);\n      },\n      century: function century(dt, culture, l) {\n        return l.format(dt, l.formats.year, culture) + \" - \" + l.format(endOfCentury(dt), l.formats.year, culture);\n      }\n    },\n    firstOfWeek: firstOfWeek,\n    parse: function parse(value, format, culture) {\n      return oldGlobalize.parseDate(value, format, culture);\n    },\n    format: function format(value, _format3, culture) {\n      return oldGlobalize.format(value, _format3, culture);\n    }\n  };\n\n  function formatData(format, _culture) {\n    var culture = getCulture(_culture),\n        numFormat = culture.numberFormat;\n\n    if (typeof format === 'string') {\n      if (format.indexOf('p') !== -1) numFormat = numFormat.percent;\n      if (format.indexOf('c') !== -1) numFormat = numFormat.curency;\n    }\n\n    return numFormat;\n  }\n\n  var number = {\n    formats: {\n      default: 'D'\n    },\n    // TODO major bump consistent ordering\n    parse: function parse(value, culture) {\n      return oldGlobalize.parseFloat(value, 10, culture);\n    },\n    format: function format(value, _format4, culture) {\n      return oldGlobalize.format(value, _format4, culture);\n    },\n    decimalChar: function decimalChar(format, culture) {\n      var data = formatData(format, culture);\n      return data['.'] || '.';\n    },\n    precision: function precision(format, _culture) {\n      var data = formatData(format, _culture);\n      if (typeof format === 'string' && format.length > 1) return parseFloat(format.substr(1));\n      return data ? data.decimals : null;\n    }\n  };\n  return {\n    date: date,\n    number: number\n  };\n}\n\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}