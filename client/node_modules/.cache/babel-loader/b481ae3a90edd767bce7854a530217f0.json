{"ast":null,"code":"/**\n * Globalize v1.4.2\n *\n * http://github.com/jquery/globalize\n *\n * Copyright 2010, 2014 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2019-03-07T13:47Z\n */\n\n/*!\n * Globalize v1.4.2 2019-03-07T13:47Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  // UMD returnExports\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"cldr\", \"../globalize\", \"./number\", \"./plural\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"cldrjs\"), require(\"../globalize\"));\n  } else {\n    // Extend global\n    factory(root.Cldr, root.Globalize);\n  }\n})(this, function (Cldr, Globalize) {\n  var formatMessage = Globalize._formatMessage,\n      runtimeBind = Globalize._runtimeBind,\n      validateParameterPresence = Globalize._validateParameterPresence,\n      validateParameterTypePlainObject = Globalize._validateParameterTypePlainObject,\n      validateParameterTypeNumber = Globalize._validateParameterTypeNumber,\n      validateParameterTypeString = Globalize._validateParameterTypeString;\n  /**\n   * format( value, numberFormatter, pluralGenerator, unitProperies )\n   *\n   * @value [Number]\n   *\n   * @numberFormatter [Object]: A numberFormatter from Globalize.numberFormatter.\n   *\n   * @pluralGenerator [Object]: A pluralGenerator from Globalize.pluralGenerator.\n   *\n   * @unitProperies [Object]: localized unit data from cldr.\n   *\n   * Format units such as seconds, minutes, days, weeks, etc.\n   *\n   * OBS:\n   *\n   * Unit Sequences are not implemented.\n   * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#Unit_Sequences\n   *\n   * Duration Unit (for composed time unit durations) is not implemented.\n   * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#durationUnit\n   */\n\n  var unitFormat = function (value, numberFormatter, pluralGenerator, unitProperties) {\n    var compoundUnitPattern = unitProperties.compoundUnitPattern,\n        dividend,\n        dividendProperties,\n        formattedValue,\n        divisor,\n        divisorProperties,\n        message,\n        pluralValue,\n        oneProperty;\n    unitProperties = unitProperties.unitProperties;\n    formattedValue = numberFormatter(value);\n    pluralValue = pluralGenerator(value); // computed compound unit, eg. \"megabyte-per-second\".\n\n    if (unitProperties instanceof Array) {\n      dividendProperties = unitProperties[0];\n      divisorProperties = unitProperties[1];\n      oneProperty = divisorProperties.hasOwnProperty(\"one\") ? \"one\" : \"other\";\n      dividend = formatMessage(dividendProperties[pluralValue], [formattedValue]);\n      divisor = formatMessage(divisorProperties[oneProperty], [\"\"]).trim();\n      return formatMessage(compoundUnitPattern, [dividend, divisor]);\n    }\n\n    message = unitProperties[pluralValue];\n    return formatMessage(message, [formattedValue]);\n  };\n\n  var unitFormatterFn = function (numberFormatter, pluralGenerator, unitProperties) {\n    return function unitFormatter(value) {\n      validateParameterPresence(value, \"value\");\n      validateParameterTypeNumber(value, \"value\");\n      return unitFormat(value, numberFormatter, pluralGenerator, unitProperties);\n    };\n  };\n  /**\n   * categories()\n   *\n   * Return all unit categories.\n   */\n\n\n  var unitCategories = [\"acceleration\", \"angle\", \"area\", \"digital\", \"duration\", \"length\", \"mass\", \"power\", \"pressure\", \"speed\", \"temperature\", \"volume\"];\n\n  function stripPluralGarbage(data) {\n    var aux, pluralCount;\n\n    if (data) {\n      aux = {};\n\n      for (pluralCount in data) {\n        aux[pluralCount.replace(/unitPattern-count-/, \"\")] = data[pluralCount];\n      }\n    }\n\n    return aux;\n  }\n  /**\n   * get( unit, form, cldr )\n   *\n   * @unit [String] The full type-unit name (eg. duration-second), or the short unit name\n   * (eg. second).\n   *\n   * @form [String] A string describing the form of the unit representation (eg. long,\n   * short, narrow).\n   *\n   * @cldr [Cldr instance].\n   *\n   * Return the plural map of a unit, eg: \"second\"\n   * { \"one\": \"{0} second\",\n   *   \"other\": \"{0} seconds\" }\n   * }\n   *\n   * Or the Array of plural maps of a compound-unit, eg: \"foot-per-second\"\n   * [ { \"one\": \"{0} foot\",\n   *     \"other\": \"{0} feet\" },\n   *   { \"one\": \"{0} second\",\n   *     \"other\": \"{0} seconds\" } ]\n   *\n   * Uses the precomputed form of a compound-unit if available, eg: \"mile-per-hour\"\n   * { \"displayName\": \"miles per hour\",\n   *    \"unitPattern-count-one\": \"{0} mile per hour\",\n   *    \"unitPattern-count-other\": \"{0} miles per hour\"\n   * },\n   *\n   * Also supports \"/\" instead of \"-per-\", eg. \"foot/second\", using the precomputed form if\n   * available.\n   *\n   * Or the Array of plural maps of a compound-unit, eg: \"foot-per-second\"\n   * [ { \"one\": \"{0} foot\",\n   *     \"other\": \"{0} feet\" },\n   *   { \"one\": \"{0} second\",\n   *     \"other\": \"{0} seconds\" } ]\n   *\n   * Or undefined in case the unit (or a unit of the compound-unit) doesn't exist.\n   */\n\n\n  var get = function (unit, form, cldr) {\n    var ret; // Ensure that we get the 'precomputed' form, if present.\n\n    unit = unit.replace(/\\//, \"-per-\"); // Get unit or <category>-unit (eg. \"duration-second\").\n\n    [\"\"].concat(unitCategories).some(function (category) {\n      return ret = cldr.main([\"units\", form, category.length ? category + \"-\" + unit : unit]);\n    }); // Rename keys s/unitPattern-count-//g.\n\n    ret = stripPluralGarbage(ret); // Compound Unit, eg. \"foot-per-second\" or \"foot/second\".\n\n    if (!ret && /-per-/.test(unit)) {\n      // \"Some units already have 'precomputed' forms, such as kilometer-per-hour;\n      // where such units exist, they should be used in preference\" UTS#35.\n      // Note that precomputed form has already been handled above (!ret).\n      // Get both recursively.\n      unit = unit.split(\"-per-\");\n      ret = unit.map(function (unit) {\n        return get(unit, form, cldr);\n      });\n\n      if (!ret[0] || !ret[1]) {\n        return;\n      }\n    }\n\n    return ret;\n  };\n\n  var unitGet = get;\n  /**\n   * properties( unit, form, cldr )\n   *\n   * @unit [String] The full type-unit name (eg. duration-second), or the short unit name\n   * (eg. second).\n   *\n   * @form [String] A string describing the form of the unit representation (eg. long,\n   * short, narrow).\n   *\n   * @cldr [Cldr instance].\n   */\n\n  var unitProperties = function (unit, form, cldr) {\n    var compoundUnitPattern, unitProperties;\n    compoundUnitPattern = cldr.main([\"units\", form, \"per/compoundUnitPattern\"]);\n    unitProperties = unitGet(unit, form, cldr);\n    return {\n      compoundUnitPattern: compoundUnitPattern,\n      unitProperties: unitProperties\n    };\n  };\n  /**\n   * Globalize.formatUnit( value, unit, options )\n   *\n   * @value [Number]\n   *\n   * @unit [String]: The unit (e.g \"second\", \"day\", \"year\")\n   *\n   * @options [Object]\n   * - form: [String] \"long\", \"short\" (default), or \"narrow\".\n   *\n   * Format units such as seconds, minutes, days, weeks, etc.\n   */\n\n\n  Globalize.formatUnit = Globalize.prototype.formatUnit = function (value, unit, options) {\n    validateParameterPresence(value, \"value\");\n    validateParameterTypeNumber(value, \"value\");\n    return this.unitFormatter(unit, options)(value);\n  };\n  /**\n   * Globalize.unitFormatter( unit, options )\n   *\n   * @unit [String]: The unit (e.g \"second\", \"day\", \"year\")\n   *\n   * @options [Object]\n   * - form: [String] \"long\", \"short\" (default), or \"narrow\".\n   *\n   * - numberFormatter: [Function] a number formatter function. Defaults to Globalize\n   *   `.numberFormatter()` for the current locale using the default options.\n   */\n\n\n  Globalize.unitFormatter = Globalize.prototype.unitFormatter = function (unit, options) {\n    var args, form, numberFormatter, pluralGenerator, returnFn, properties;\n    validateParameterPresence(unit, \"unit\");\n    validateParameterTypeString(unit, \"unit\");\n    validateParameterTypePlainObject(options, \"options\");\n    options = options || {};\n    args = [unit, options];\n    form = options.form || \"long\";\n    properties = unitProperties(unit, form, this.cldr);\n    numberFormatter = options.numberFormatter || this.numberFormatter();\n    pluralGenerator = this.pluralGenerator();\n    returnFn = unitFormatterFn(numberFormatter, pluralGenerator, properties);\n    runtimeBind(args, this.cldr, returnFn, [numberFormatter, pluralGenerator, properties]);\n    return returnFn;\n  };\n\n  return Globalize;\n});","map":null,"metadata":{},"sourceType":"script"}