{"ast":null,"code":"import axios from \"axios\";\nimport history from \"../routes/history\";\nimport * as actions from '../actionTypes/index';\nimport jwtDecode from \"jwt-decode\";\nconst URL = \"http://localhost:3001\";\nexport const registerUser = credentials => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"\".concat(URL, \"/signin\"), credentials);\n      const decodedToken = jwtDecode(res.data.token);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\");\n      history.push(\"/dashboard\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const login = credentials => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"\".concat(URL, \"/login\"), credentials);\n      const decodedToken = jwtDecode(res.data.token);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\");\n      return;\n    } catch (e) {\n      const data = !e.response ? null : e.response.data.error;\n      dispatch({\n        type: actions.AUTH_ERROR,\n        payload: {\n          error: data\n        }\n      });\n      return;\n    }\n  };\n};","map":{"version":3,"sources":["/home/moral/workspace/start/src/actions/auth.js"],"names":["axios","history","actions","jwtDecode","URL","registerUser","credentials","dispatch","res","post","decodedToken","data","token","type","SET_USER","payload","profile","id","sub","name","email","localStorage","setItem","AUTHENTICATED","auth","push","error","console","log","login","e","response","AUTH_ERROR"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,sBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,MAAMC,GAAG,GAAG,uBAAZ;AAGA,OAAO,MAAMC,YAAY,GAAIC,WAAD,IAAiB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAN,WAAcL,GAAd,cAA4BE,WAA5B,CAAlB;AACA,YAAMI,YAAY,GAAGP,SAAS,CAACK,GAAG,CAACG,IAAJ,CAASC,KAAV,CAA9B;AACAL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEX,OAAO,CAACY,QADP;AAEPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,EAAE,EAAEP,YAAY,CAACQ,GADV;AAEPC,YAAAA,IAAI,EAAET,YAAY,CAACS,IAFZ;AAGPC,YAAAA,KAAK,EAAEV,YAAY,CAACU;AAHb;AADF;AAFF,OAAD,CAAR;AAUAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6Bd,GAAG,CAACG,IAAJ,CAASC,KAAtC;AACAL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEX,OAAO,CAACqB,aADP;AAEPR,QAAAA,OAAO,EAAE;AACPS,UAAAA,IAAI,EAAE;AADC;AAFF,OAAD,CAAR;AAMAvB,MAAAA,OAAO,CAACwB,IAAR,CAAa,YAAb;AACAxB,MAAAA,OAAO,CAACwB,IAAR,CAAa,YAAb;AACD,KAtBD,CAsBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GA1BD;AA2BD,CA5BM;AA+BP,OAAO,MAAMG,KAAK,GAAIvB,WAAD,IAAiB;AACpC,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAN,WAAcL,GAAd,aAA2BE,WAA3B,CAAlB;AACA,YAAMI,YAAY,GAAGP,SAAS,CAACK,GAAG,CAACG,IAAJ,CAASC,KAAV,CAA9B;AACAL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEX,OAAO,CAACY,QADP;AAEPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,EAAE,EAAEP,YAAY,CAACQ,GADV;AAEPC,YAAAA,IAAI,EAAET,YAAY,CAACS,IAFZ;AAGPC,YAAAA,KAAK,EAAEV,YAAY,CAACU;AAHb;AADF;AAFF,OAAD,CAAR;AAUAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6Bd,GAAG,CAACG,IAAJ,CAASC,KAAtC;AACAL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEX,OAAO,CAACqB,aADP;AAEPR,QAAAA,OAAO,EAAE;AACPS,UAAAA,IAAI,EAAE;AADC;AAFF,OAAD,CAAR;AAMAvB,MAAAA,OAAO,CAACwB,IAAR,CAAa,YAAb;AACA;AACD,KAtBD,CAsBE,OAAOK,CAAP,EAAU;AACV,YAAMnB,IAAI,GAAG,CAACmB,CAAC,CAACC,QAAH,GAAc,IAAd,GAAqBD,CAAC,CAACC,QAAF,CAAWpB,IAAX,CAAgBe,KAAlD;AACAnB,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEX,OAAO,CAAC8B,UADP;AAEPjB,QAAAA,OAAO,EAAE;AACPW,UAAAA,KAAK,EAAEf;AADA;AAFF,OAAD,CAAR;AAMA;AACD;AACF,GAjCD;AAkCD,CAnCM","sourcesContent":["import axios from \"axios\";\nimport history from \"../routes/history\";\nimport * as actions from '../actionTypes/index'\nimport jwtDecode from \"jwt-decode\";\nconst URL = \"http://localhost:3001\";\n\n\nexport const registerUser = (credentials) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`${URL}/signin`, credentials);\n      const decodedToken = jwtDecode(res.data.token);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\")\n      history.push(\"/dashboard\")\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n\nexport const login = (credentials) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`${URL}/login`, credentials);\n      const decodedToken = jwtDecode(res.data.token);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\")\n      return\n    } catch (e) {\n      const data = !e.response ? null : e.response.data.error;\n      dispatch({\n        type: actions.AUTH_ERROR,\n        payload: {\n          error: data\n        }\n      });\n      return\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}