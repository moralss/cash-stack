{"ast":null,"code":"import axios from \"axios\";\nimport history from \"../routes/history\";\nimport * as actions from '../actionTypes/index';\nimport * as system from '../actions/system';\nimport jwtDecode from \"jwt-decode\";\nconst URL = \"http://localhost:3001\";\nexport const registerUser = credentials => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"\".concat(URL, \"/signin\"), credentials);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\");\n      history.push(\"/dashboard\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const login = credentials => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"\".concat(URL, \"/login\"), credentials);\n      const decodedToken = jwtDecode(res.data.token);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\");\n      return;\n    } catch (e) {\n      const data = !e.response ? null : e.response.data.error;\n      dispatch({\n        type: actions.AUTH_ERROR,\n        payload: {\n          error: data\n        }\n      });\n      return;\n    }\n  };\n};","map":{"version":3,"sources":["/home/moral/workspace/start/src/actions/auth.js"],"names":["axios","history","actions","system","jwtDecode","URL","registerUser","credentials","dispatch","res","post","type","SET_USER","payload","profile","id","decodedToken","sub","name","email","localStorage","setItem","data","token","AUTHENTICATED","auth","push","error","console","log","login","e","response","AUTH_ERROR"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,sBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,MAAMC,GAAG,GAAG,uBAAZ;AAGA,OAAO,MAAMC,YAAY,GAAIC,WAAD,IAAiB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,WAAcL,GAAd,cAA4BE,WAA5B,CAAlB;AACAC,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,OAAO,CAACU,QADP;AAEPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,EAAE,EAAEC,YAAY,CAACC,GADV;AAEPC,YAAAA,IAAI,EAAEF,YAAY,CAACE,IAFZ;AAGPC,YAAAA,KAAK,EAAEH,YAAY,CAACG;AAHb;AADF;AAFF,OAAD,CAAR;AAUAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BZ,GAAG,CAACa,IAAJ,CAASC,KAAtC;AACAf,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,OAAO,CAACsB,aADP;AAEPX,QAAAA,OAAO,EAAE;AACPY,UAAAA,IAAI,EAAE;AADC;AAFF,OAAD,CAAR;AAMAxB,MAAAA,OAAO,CAACyB,IAAR,CAAa,YAAb;AACAzB,MAAAA,OAAO,CAACyB,IAAR,CAAa,YAAb;AACD,KArBD,CAqBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAzBD;AA0BD,CA3BM;AA8BP,OAAO,MAAMG,KAAK,GAAIvB,WAAD,IAAiB;AACpC,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,WAAcL,GAAd,aAA2BE,WAA3B,CAAlB;AACA,YAAMS,YAAY,GAAGZ,SAAS,CAACK,GAAG,CAACa,IAAJ,CAASC,KAAV,CAA9B;AACAf,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,OAAO,CAACU,QADP;AAEPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,EAAE,EAAEC,YAAY,CAACC,GADV;AAEPC,YAAAA,IAAI,EAAEF,YAAY,CAACE,IAFZ;AAGPC,YAAAA,KAAK,EAAEH,YAAY,CAACG;AAHb;AADF;AAFF,OAAD,CAAR;AAUAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BZ,GAAG,CAACa,IAAJ,CAASC,KAAtC;AACAf,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,OAAO,CAACsB,aADP;AAEPX,QAAAA,OAAO,EAAE;AACPY,UAAAA,IAAI,EAAE;AADC;AAFF,OAAD,CAAR;AAMAxB,MAAAA,OAAO,CAACyB,IAAR,CAAa,YAAb;AACA;AACD,KAtBD,CAsBE,OAAOK,CAAP,EAAU;AACV,YAAMT,IAAI,GAAG,CAACS,CAAC,CAACC,QAAH,GAAc,IAAd,GAAqBD,CAAC,CAACC,QAAF,CAAWV,IAAX,CAAgBK,KAAlD;AACAnB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,OAAO,CAAC+B,UADP;AAEPpB,QAAAA,OAAO,EAAE;AACPc,UAAAA,KAAK,EAAEL;AADA;AAFF,OAAD,CAAR;AAMA;AACD;AACF,GAjCD;AAkCD,CAnCM","sourcesContent":["import axios from \"axios\";\nimport history from \"../routes/history\";\nimport * as actions from '../actionTypes/index'\nimport * as system from '../actions/system';\nimport jwtDecode from \"jwt-decode\";\nconst URL = \"http://localhost:3001\";\n\n\nexport const registerUser = (credentials) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`${URL}/signin`, credentials);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\")\n      history.push(\"/dashboard\")\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n\nexport const login = (credentials) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`${URL}/login`, credentials);\n      const decodedToken = jwtDecode(res.data.token);\n      dispatch({\n        type: actions.SET_USER,\n        payload: {\n          profile: {\n            id: decodedToken.sub,\n            name: decodedToken.name,\n            email: decodedToken.email\n          }\n        }\n      });\n      localStorage.setItem(\"user\", res.data.token);\n      dispatch({\n        type: actions.AUTHENTICATED,\n        payload: {\n          auth: true\n        }\n      });\n      history.push(\"/dashboard\")\n      return\n    } catch (e) {\n      const data = !e.response ? null : e.response.data.error;\n      dispatch({\n        type: actions.AUTH_ERROR,\n        payload: {\n          error: data\n        }\n      });\n      return\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}