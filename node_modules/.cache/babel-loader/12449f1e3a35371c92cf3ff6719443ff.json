{"ast":null,"code":"/**\n * Globalize v1.4.2\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2019-03-07T13:47Z\n */\n\n/*!\n * Globalize v1.4.2 2019-03-07T13:47Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  // UMD returnExports\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"cldr\", \"cldr/event\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"cldrjs\"));\n  } else {\n    // Global\n    root.Globalize = factory(root.Cldr);\n  }\n})(this, function (Cldr) {\n  /**\n   * A toString method that outputs meaningful values for objects or arrays and\n   * still performs as fast as a plain string in case variable is string, or as\n   * fast as `\"\" + number` in case variable is a number.\n   * Ref: http://jsperf.com/my-stringify\n   */\n  var toString = function (variable) {\n    return typeof variable === \"string\" ? variable : typeof variable === \"number\" ? \"\" + variable : JSON.stringify(variable);\n  };\n  /**\n   * formatMessage( message, data )\n   *\n   * @message [String] A message with optional {vars} to be replaced.\n   *\n   * @data [Array or JSON] Object with replacing-variables content.\n   *\n   * Return the formatted message. For example:\n   *\n   * - formatMessage( \"{0} second\", [ 1 ] ); // 1 second\n   *\n   * - formatMessage( \"{0}/{1}\", [\"m\", \"s\"] ); // m/s\n   *\n   * - formatMessage( \"{name} <{email}>\", {\n   *     name: \"Foo\",\n   *     email: \"bar@baz.qux\"\n   *   }); // Foo <bar@baz.qux>\n   */\n\n\n  var formatMessage = function (message, data) {\n    // Replace {attribute}'s\n    message = message.replace(/{[0-9a-zA-Z-_. ]+}/g, function (name) {\n      name = name.replace(/^{([^}]*)}$/, \"$1\");\n      return toString(data[name]);\n    });\n    return message;\n  };\n\n  var objectExtend = function () {\n    var destination = arguments[0],\n        sources = [].slice.call(arguments, 1);\n    sources.forEach(function (source) {\n      var prop;\n\n      for (prop in source) {\n        destination[prop] = source[prop];\n      }\n    });\n    return destination;\n  };\n\n  var createError = function (code, message, attributes) {\n    var error;\n    message = code + (message ? \": \" + formatMessage(message, attributes) : \"\");\n    error = new Error(message);\n    error.code = code;\n    objectExtend(error, attributes);\n    return error;\n  };\n\n  var runtimeStringify = function (args) {\n    return JSON.stringify(args, function (key, value) {\n      if (value && value.runtimeKey) {\n        return value.runtimeKey;\n      }\n\n      return value;\n    });\n  }; // Based on http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n\n\n  var stringHash = function (str) {\n    return [].reduce.call(str, function (hash, i) {\n      var chr = i.charCodeAt(0);\n      hash = (hash << 5) - hash + chr;\n      return hash | 0;\n    }, 0);\n  };\n\n  var runtimeKey = function (fnName, locale, args, argsStr) {\n    var hash;\n    argsStr = argsStr || runtimeStringify(args);\n    hash = stringHash(fnName + locale + argsStr);\n    return hash > 0 ? \"a\" + hash : \"b\" + Math.abs(hash);\n  };\n\n  var functionName = function (fn) {\n    if (fn.name !== undefined) {\n      return fn.name;\n    } // fn.name is not supported by IE.\n\n\n    var matches = /^function\\s+([\\w\\$]+)\\s*\\(/.exec(fn.toString());\n\n    if (matches && matches.length > 0) {\n      return matches[1];\n    }\n  };\n\n  var runtimeBind = function (args, cldr, fn, runtimeArgs) {\n    var argsStr = runtimeStringify(args),\n        fnName = functionName(fn),\n        locale = cldr.locale; // If name of the function is not available, this is most likely due to uglification,\n    // which most likely means we are in production, and runtimeBind here is not necessary.\n\n    if (!fnName) {\n      return fn;\n    }\n\n    fn.runtimeKey = runtimeKey(fnName, locale, null, argsStr);\n\n    fn.generatorString = function () {\n      return \"Globalize(\\\"\" + locale + \"\\\").\" + fnName + \"(\" + argsStr.slice(1, -1) + \")\";\n    };\n\n    fn.runtimeArgs = runtimeArgs;\n    return fn;\n  };\n\n  var validate = function (code, message, check, attributes) {\n    if (!check) {\n      throw createError(code, message, attributes);\n    }\n  };\n\n  var alwaysArray = function (stringOrArray) {\n    return Array.isArray(stringOrArray) ? stringOrArray : stringOrArray ? [stringOrArray] : [];\n  };\n\n  var validateCldr = function (path, value, options) {\n    var skipBoolean;\n    options = options || {};\n    skipBoolean = alwaysArray(options.skip).some(function (pathRe) {\n      return pathRe.test(path);\n    });\n    validate(\"E_MISSING_CLDR\", \"Missing required CLDR content `{path}`.\", value || skipBoolean, {\n      path: path\n    });\n  };\n\n  var validateDefaultLocale = function (value) {\n    validate(\"E_DEFAULT_LOCALE_NOT_DEFINED\", \"Default locale has not been defined.\", value !== undefined, {});\n  };\n\n  var validateParameterPresence = function (value, name) {\n    validate(\"E_MISSING_PARAMETER\", \"Missing required parameter `{name}`.\", value !== undefined, {\n      name: name\n    });\n  };\n  /**\n   * range( value, name, minimum, maximum )\n   *\n   * @value [Number].\n   *\n   * @name [String] name of variable.\n   *\n   * @minimum [Number]. The lowest valid value, inclusive.\n   *\n   * @maximum [Number]. The greatest valid value, inclusive.\n   */\n\n\n  var validateParameterRange = function (value, name, minimum, maximum) {\n    validate(\"E_PAR_OUT_OF_RANGE\", \"Parameter `{name}` has value `{value}` out of range [{minimum}, {maximum}].\", value === undefined || value >= minimum && value <= maximum, {\n      maximum: maximum,\n      minimum: minimum,\n      name: name,\n      value: value\n    });\n  };\n\n  var validateParameterType = function (value, name, check, expected) {\n    validate(\"E_INVALID_PAR_TYPE\", \"Invalid `{name}` parameter ({value}). {expected} expected.\", check, {\n      expected: expected,\n      name: name,\n      value: value\n    });\n  };\n\n  var validateParameterTypeLocale = function (value, name) {\n    validateParameterType(value, name, value === undefined || typeof value === \"string\" || value instanceof Cldr, \"String or Cldr instance\");\n  };\n  /**\n   * Function inspired by jQuery Core, but reduced to our use case.\n   */\n\n\n  var isPlainObject = function (obj) {\n    return obj !== null && \"\" + obj === \"[object Object]\";\n  };\n\n  var validateParameterTypePlainObject = function (value, name) {\n    validateParameterType(value, name, value === undefined || isPlainObject(value), \"Plain Object\");\n  };\n\n  var alwaysCldr = function (localeOrCldr) {\n    return localeOrCldr instanceof Cldr ? localeOrCldr : new Cldr(localeOrCldr);\n  }; // ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&redirectslug=JavaScript%2FGuide%2FRegular_Expressions\n\n\n  var regexpEscape = function (string) {\n    return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n  };\n\n  var stringPad = function (str, count, right) {\n    var length;\n\n    if (typeof str !== \"string\") {\n      str = String(str);\n    }\n\n    for (length = str.length; length < count; length += 1) {\n      str = right ? str + \"0\" : \"0\" + str;\n    }\n\n    return str;\n  };\n\n  function validateLikelySubtags(cldr) {\n    cldr.once(\"get\", validateCldr);\n    cldr.get(\"supplemental/likelySubtags\");\n  }\n  /**\n   * [new] Globalize( locale|cldr )\n   *\n   * @locale [String]\n   *\n   * @cldr [Cldr instance]\n   *\n   * Create a Globalize instance.\n   */\n\n\n  function Globalize(locale) {\n    if (!(this instanceof Globalize)) {\n      return new Globalize(locale);\n    }\n\n    validateParameterPresence(locale, \"locale\");\n    validateParameterTypeLocale(locale, \"locale\");\n    this.cldr = alwaysCldr(locale);\n    validateLikelySubtags(this.cldr);\n  }\n  /**\n   * Globalize.load( json, ... )\n   *\n   * @json [JSON]\n   *\n   * Load resolved or unresolved cldr data.\n   * Somewhat equivalent to previous Globalize.addCultureInfo(...).\n   */\n\n\n  Globalize.load = function () {\n    // validations are delegated to Cldr.load().\n    Cldr.load.apply(Cldr, arguments);\n  };\n  /**\n   * Globalize.locale( [locale|cldr] )\n   *\n   * @locale [String]\n   *\n   * @cldr [Cldr instance]\n   *\n   * Set default Cldr instance if locale or cldr argument is passed.\n   *\n   * Return the default Cldr instance.\n   */\n\n\n  Globalize.locale = function (locale) {\n    validateParameterTypeLocale(locale, \"locale\");\n\n    if (arguments.length) {\n      this.cldr = alwaysCldr(locale);\n      validateLikelySubtags(this.cldr);\n    }\n\n    return this.cldr;\n  };\n  /**\n   * Optimization to avoid duplicating some internal functions across modules.\n   */\n\n\n  Globalize._alwaysArray = alwaysArray;\n  Globalize._createError = createError;\n  Globalize._formatMessage = formatMessage;\n  Globalize._isPlainObject = isPlainObject;\n  Globalize._objectExtend = objectExtend;\n  Globalize._regexpEscape = regexpEscape;\n  Globalize._runtimeBind = runtimeBind;\n  Globalize._stringPad = stringPad;\n  Globalize._validate = validate;\n  Globalize._validateCldr = validateCldr;\n  Globalize._validateDefaultLocale = validateDefaultLocale;\n  Globalize._validateParameterPresence = validateParameterPresence;\n  Globalize._validateParameterRange = validateParameterRange;\n  Globalize._validateParameterTypePlainObject = validateParameterTypePlainObject;\n  Globalize._validateParameterType = validateParameterType;\n  return Globalize;\n});","map":null,"metadata":{},"sourceType":"script"}